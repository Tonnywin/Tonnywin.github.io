<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[关于第一版网站第一次改动总结]]></title>
      <url>/2017/08/17/first-version-change-1/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;这两天本来打算找工作，可是脑子里老是觉得自己的第一版网站还是不太满意，总感觉不完美。脑子里也总冒出<span style="color:blue">要不把网站SEO下吧?</span><span style="color:blue">要不干脆别等第二版了，现在就把学到的那一点webpack2给用上吧?</span>想来想去，就开始干了。因为这两个对于网站来说实在是太重要了，也太值得我借此机会练练手。</p>
<p>&emsp;&emsp;话不多说，开始干！老实说SEO之前大概有了解过。但没有过实操经验。于是查了资料，看了教程。发现SEO水很深！！！最牛逼的当然是花钱啦~但是最实用的当然是“传统的SEO”了。而传统的（屌丝的）又分为白帽和黑帽。作为一名遵纪守法，品行优良的人当然是选择白帽啦。于是再深入下去发现，白帽又分为从页面布局下手，以及<span style="color:red">其他。</span>对！没看错就是其他！因为范围太广了，什么交换友链啊，点击量啊，内容尽量标题党啊什么的，反正归结起来<strong>其他就是引流量，吸流量。</strong>显然这类方法费时费力而且见效慢。再加上做博客当然是低调一点好啊（我说的是适当）。<strong>于是SEO方案确定了–,从代码优化、页面布局方面进行SEO</strong>。</p>
<p>&emsp;&emsp;在确定方案后，且还需了解一件事。就是<strong>爬虫—-搜索引擎抓取网站的算法，其实SEO做的事情就是让爬虫快速抓取到，而且还尽量让它把自己的网站排名的优先级往前靠。</strong>那么问题来了？怎么才能让它快速抓取到呢？最快的方法不过于自己送上门了。也就是在搜索平台进行网站相关认证并申请收录。于是首先我就国内在最牛逼的搜索引擎–百度上的站长平台注册了，并进行网站认证，申请收录。然后登陆各大搜索平台如：360，搜狗等一并申请收录。<strong>第一步：争取各大搜索引擎爬虫的注意力完成了，但是能不能收录，以及收录的优先级还是得第二布完成，也就是SEO了。</strong>看字头疼，直接上图：</p>
<p><img src="/2017/08/17/first-version-change-1/pic_1.jpg" title="白帽的具体方法"><br><strong>其中网站标题、关键字、描述用代码实现分别为：</strong><br><code>&lt;title&gt;与网站内容相关的标题，含有搜索关键词&lt;/title&gt;</code><br><code>&lt;meta name=&quot;Keywords&quot; content=&quot;关键词&quot;/&gt;</code><br><code>&lt;meta name=&quot;Description&quot; content=&quot;对网站的描述，尽量包含关键词，而且具有吸引力~&quot;/&gt;</code><br><strong>其中网站内容优化则分为：网站结构布局优化、网页代码优化</strong></p>
<p>其中网页结构布局优化具体方法如图所示：<br><img src="/2017/08/17/first-version-change-1/pic_2.jpg" title="网站结构布局优化的具体方法"><br>控制首页链接数量与增加外链引用不矛盾。合理首页的链接数量有助于爬虫的抓取，外链的引用可以增加网站的权重。扁平化的目录层次，最有利于爬虫抓取的目录层次应控制在3层左右。导航SEO的优化，这与面包屑导航以及分页导航有关，由于本次网站并没有这种结构就略过。</p>
<p>接下来就是网页代码的优化了：上图！！！<br><img src="/2017/08/17/first-version-change-1/pic_3.jpg" title="代码SEO的具体方法"><br>看图似乎看不太懂，哈哈哈。简单总结下<br><br>1.<code>&lt;a&gt;</code>标签如果是外链的话应把<code>rel=&quot;nofollow&quot;</code>这样爬虫就不会爬到别的网站然后迷路啦~然后捏，不管是不是外链最好给上<code>title</code>说明。<br><br>2.用<code>h</code>标签时尽量往<code>h1</code>靠，当然要符合网页结构以及语义化<br><br>3.<code>&lt;br&gt;</code>标签应该时在文本标签里如<code>&lt;p&gt;</code>标签里。去那些大型网站不难看到<code>&lt;p&gt;&lt;br/&gt;&lt;p&gt;</code>，这么一了解就不奇怪了。<br>这次的SEO优化除了在前面提及的<code>title</code>、<code>keywords</code>、<code>description</code>外，主要是把<code>&lt;a&gt;</code>标签给上了说明，并且凡是外链都设置了<code>rel=&quot;nofollow&quot;</code>。页面布局方面的SEO也做了一些细微调整。本次网站的结构还是比较合理的。</p>
<p>最后再补补代码SEO的一些“心法吧”，上图咯~<br><img src="/2017/08/17/first-version-change-1/pic_4.jpg" title="代码SEO优化心法"><br>关于本次网站SEO的总结到这里就差不多了，其实说实话我也是现学现用，所以也就总结的啰嗦点~</p>
<p>&emsp;&emsp;接下来关于webpack2打包可不是现学现用了，我之前可是努力的学过的。当然所有学习的知识只要没上过战场都不作数。所以这次斗胆拿来冲锋了~<br><br>&emsp;&emsp;这次webpack2的使用不完善也不完美。所谓不完善是没用webpack-dev-server功能，没用热更新，也没有用webpack的nodeJS功能搭建后端坏境。这次仅仅用来打包的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&amp;emsp;&amp;emsp;之所以实战锻炼人是有原因的，进过实际操练发现，webpack太适合ES6的项目了。它的解依赖，热更新，众多加载器（支持ES6转化，支持SASS,LESS预处理语言，支持模板语法等等），遗憾的是这次我的网站已经开发完了（其实第二版就会用到一些啦~，所以这次也就用到了`html-webpack-plugin`、`style-loader`、`css-loader`对html,js,css进行打包。又因为需要对图片进行压缩，所以又用了`url-loader`、`iamge-webpack-loader`、`html-withimg-loader`,再对css打包时考虑到用了一些CSS3属性，这些属性有些厂商前缀名不一样所以用了`postcss-loader`、`aitoprefixer插件`自动补上一些CSS3属性的前缀名。在实际打包的过程中，需要入口，而且考虑到我的js文件其实时是有一些依赖的，索性用npm安装了`babal-loader`，用ES6的import把原先零散的Js文件整合到一个entry入口，最后也到处到一个js文件---`bundle.main.js`。整个打包下来，原先3.2MB左后的网站直接打包成1.1MB左右。实在是让我惊讶。webpack太神奇了~</div><div class="line"></div><div class="line">&amp;emsp;&amp;emsp;过程感受说完了，该说问题了。SEO并没有遇到太多问题。而webpack2确实有一些问题需要记录以及总结。我学的webpack教程实在慕课网学的是webpack1的版本，由于自己能大概看懂英文文档，所以版本的差距也就没有太多的问题。至于以下几个问题都是没有解决的。只用了一些替代方法解决。（找到解决办法我会更新这篇文章）</div><div class="line"></div><div class="line">&lt;span style=&quot;color:red&quot;&gt;webpack使用的第一个问题：html-webpack-plugin的模板语法问题。&lt;/span&gt;定义`var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)`后可以在模板文件`index.html`中用ejs语法来使用`htmlWebpackPlugin.options`以及`htmlWebpackPlugin.files`相关变量。但是（可能是我loader种类下的过多）我在`index.html`引入时，打包后ejs语法并没有执行。</div><div class="line"></div><div class="line">&lt;span style=&quot;color:red&quot;&gt;webpack使用的第二个问题：用原生js来实现的jsonp中的callback的函数调用没有办法被打包到js出口文件中，导致函数undefined。&lt;/span&gt;无奈，我只能把callback函数用`&lt;script&gt;`写在jsonp的跨域调用生成的`&lt;script&gt;`标签之前。</div><div class="line"></div><div class="line">&amp;emsp;&amp;emsp;写到这里，第一版网站的第一次改动总结也就总结的差不多了，这次的网站改动让我感触最深的还是webpack，功能很强大，可是我却无法完全驾驭。现在用它打包,也已经是我肚子里仅会的。这段时间正好开始搞Vue，顺便在看看阮一峰的webpack教程，把它彻底搞定吧</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> programme </tag>
            
            <tag> my-website </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建个人网站第一版的一些总结]]></title>
      <url>/2017/08/11/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%AC%AC%E4%B8%80%E7%89%88%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;刚开始构建网站时，就想通过hash值来做一个单页面结构的网站，这也是为以后的第二版采用<code>vue-router</code>来搭建单页面网站做一些铺垫。因此整个网站从主页、关于我、视野、github仓库都是通过监控<code>hash</code>值的改变来做到的。由于现在网站适应移动端，pc端成为潮流，而且响应式网站具有非常友善的浏览体验，于是我也毫不犹豫地采用了<code>bootstrap</code>对整个网站进行响应式开发。至于开发所用的技术方面，我就不用怎么想了，就把我目前掌握最熟练的<code>html+css+jquery+bootstrap</code>来做一个菜鸟级开发了。其实我也想蠢蠢欲试直接拿<code>sass+es6+webpack+bootstrap</code>来进行开发的，但是考虑之前练手的项目中<code>es6</code>用的太少了，而且我觉得作为一名菜鸟必须把基础打好，饭咬一口一口吃，路要一步一步走。把基础打好，后面什么的也就指日可待了。想好了用什么开发以及大概的网站框架后，接下来就是构思网站的一些功能模块了。虽然这次不打算用<code>vue</code>开发，但是由于接触了<code>vue组件</code>开发，于是这个开发尽量往组件化开发的思想上靠，所以这次网站开发的功能模块能用<code>jQuery插件</code>开发就用<code>jQuery插件</code>开发。因此这次除了用了一两个别人的插件（复制功能插件，寄语文字动画功能插件），其他的都是自己独立编写的插件（弹窗，留言板，拖拽、字数检测等）。</p>
<p>&emsp;&emsp;要说搭建网站学到最多的是什么，我想当然是明白了前后端怎么合作分工来共同搭建网站。之前学习中，对于后端的接触无非是用<code>apache+php</code>搭建服务端环境,然后用别人给的api通过<code>ajax</code>来实现数据的交互。这次由于自己要做后端，因此专门自学了<code>MySQL</code>语言，和一些简单的<code>php</code>语句。因此也算完整地参与了<code>MySQL</code>搭建数据库，<code>PHP</code>对数据进行相应处理的后端开发过程。当然也包括，后来自己在阿里云上传数据库，连接数据库，管理数据库一些后端处理的学习。这整个过程让我更加明白前后端的关系紧密，以及整个网站运作过程中数据的产生，操作和传送处理过程。说白了，<strong>前端做的事也就是把信息更人性化，动态化的呈给用户，并且收集用户的信息完整无误的传送给后端的同志们进行分析处理的过程</strong>。因此要做好后端就要做好数据的高效计算处理以及管理，<strong>要做好前端则更需要做到极致的用户体验</strong>。当然，这也仅仅是我个人肤浅的认知。</p>
<p>&emsp;&emsp;说了这么多，作为一篇技术类的博客总结一般都是要贴代码并开始码字装逼的。我也不例外。谈完网站的构建思想，以及搭建网站给我最深的感触后，接下来就来谈谈在开发过程中，自己遇到的一些问题，以及怎么解决的吧。说实话，菜鸟遇到的问题，确实五花八门，但这也正是一个程序员必须要走的路啊~~~~</p>
<p>&emsp;&emsp;<span style="color:red">第一个问题是判断是拖拽还是点击问题</span>。我做的 <code>联系我</code> 这个弹窗的功能模块是如果点击弹出弹窗，如果拖拽则不弹出弹窗。由于拖拽一定是会触发该对象的<code>click</code>事件的。因此既然必须要走<code>click</code>事件，那么只能在<code>click</code>事件里进行判断是否拖拽了。又因为点击和拖拽唯一的区别就在于点击不会触发<code>onmousemove</code>事件，那么解决方案就是设置一个标志位。走<code>onmousemove</code>事件改变标志位。用标志位判断是否执行<code>click</code>里的代码。这一个问题的解决让我对标志位的使用情景的理解有了更一步的认识。它就像开发者设置的开关，当需要根据<code>A情况</code>来判断<code>B情况</code>时，在<code>A情况</code>中设置标志位传达信息来进行对<code>B情况</code>的判断是最好不过了。这一个问题确实是个小问题，但对我来说却印象深刻，所谓博客就是对自己的交代，所以也在此深深的记录总结。</p>
<p>&emsp;&emsp;<span style="color:red">第二个问题，页面切换动画问题</span>。我做的网页的切换动画时折叠动画。但同时又需要满足自适应问题，也就是说，在不同设备下我的网页内容的高是不一样的，但是折叠动画（我指的是用jQuery开发）需要有一个明确的动画目标值–高。所以查了很多资料，也没有具体的实际解决方案。最后索性按着最基本的原理自己给了一个解决方案。也就是<strong>在CSS中height设置为auto，在js中再改变height的属性，对高进行动画调整，最后在把height属性改回auto。</strong>当然这样做违反了代码实在不简洁，但是考虑到用了jQuery的animate,也只能这么妥协了。若是有哪位大神有好的解决方案，恳请留言指教啊~~~具体代码如下：</p>
<pre><code> indexContent.stop().animate({&quot;height&quot;: 0}, toggleTime,function () {
    conDiv.removeClass(&quot;active&quot;);
    var oheight = $this.css(&quot;height&quot;, &quot;auto&quot;).height();
    $this.css({&quot;height&quot;: 0}).addClass(&quot;active&quot;).stop().animate({
       &quot;height&quot;: oheight}, toggleTime,function () {
        $this.css(&quot;height&quot;, &quot;auto&quot;);
    });
});
</code></pre><p>&emsp;&emsp;<span style="color:red">第三个问题，寄语功能文字动画问题</span>。首先寄语功能动画效果相对于每次进入一次主页再加一次显然只加载一次用户体验较佳。因此这里也就是用标志位判断一下就OK了。然后是加载完后，需要有一个缩小并且背景切换的效果，因此，又需要变化高。因此在切换到非主页的其他页面由于当时寄语板的父级没有高，因此会造成寄语板溢出的状况。怎么解决呢，最后发现只要给寄语板的<code>height</code>设置<code>auto属性</code>就解决了。它会在折叠动画后自适应地扩展父级的高。在这需要总结的有两个地方：<br><br>1.若父级的高为0，用js对子级的高进行改变时，只会造成溢出。<br><br>2.height设置auto属性，能自适应的扩种父级的高。前提是父级没有固定的高。</p>
<p>&emsp;&emsp;<span style="color:red">第四个问题，移动端与PC端拖拽事件不同的问题</span>。说实话，之前自己练的小项目中根本没有接触过移动端。因此当开发中发现自己开发的拖拽插件在移动端死活动不了时又不得不补一下移动端的一些知识。了解移动端时触发事件是<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>后确定了思路。先判断是否为移动端，在进行相应的事件加载，毕竟PC端与移动端相应的拖拽事件都加载一遍是不合理的。因此又扯出一个问题？怎么判断是否为移动端？首先移动端和PC端的浏览器信息肯定是不一样的，于是机智的我马上想到了用的很少了<code>navigator</code>，一查资料，果然，通过<code>正则表达式</code>以及<code>navigator.userAgent</code>来实现判断。具体如下：</p>
<pre><code>if(/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {...}
</code></pre><p>考虑到像Blackberry黑莓手机已经快要消失匿迹了，你也可以直接删了。当然，我仍然留有一部黑莓手机，所以也就不忍心了。至于<code>touchstart</code>、<code>touchmove</code>、<code>touchend</code>的使用也就大同小异了，在这里总结也只是着重说明PC端与移动端的拖拽事件的不一样。</p>
<p><span style="color:red">第五个问题,外链的使用问题。</span>按道理来说外链的使用是没有问题的，就是使用<code>a标签</code>一调用就行了，可是现实并不总是这么美好。在调用别人家的图片时由于相当于你偷人家的资源，于是就有了<strong>防盗链</strong>这一说。这让一直认为世界是无私美好的我瞬间涨姿势了！对于一些图标啥的我也是直接挂在图片外链网站，也没有想过用人家的外链。但是在休闲栏我用的是别人的api，有的技术文章还必须得看看图片。这怎么办捏？查了老半天资料，找了个勉强的解决办法。解决原理：<strong>让浏览器在访问链接时不要带上referer。</strong>解决办法：<strong>在a标签内使用rel=”noreferrer”来达到这一目的。</strong>缺憾就是仅支持目前大部分的基于Webkit的浏览器。</p>
<p><span style="color:red">第六个问题,Ajax的使用问题。</span>由于第一版的网站开发要求兼容到IE9，但是jQuery的ajax函数在跨域调用时在ie9浏览器不怎么管用，看了几遍官方文档也试了一些网上的解决方案都不行，最后只能用原生js通过jsonp来实现。</p>
<p><span style="color:red">第七个问题,关于cookie的使用。</span>在构建留言板功能时，考虑了几个因素。一个是内容高度没有超过容器时，隐藏滚动条。第二个添加新的留言时，留言板显示返回首位。第三个便是正则表达式来对留言字数以及内容做一些简单的规范。最后就是通过cookie来限制留言的次数了。</p>
<p><span style="color:red">第七个问题,条件注释判断浏览器。</span>这个可以说是非常实用的了。简单解释就是只有ie浏览器能识别，其他浏览器会直接把它当成注释。在兼容ie浏览器方面，可以根据浏览器不同来选择css样式加载，以及html内容的改变。由于，我在休闲栏用的api不支持callback，因此跨域访问不兼容ie9，我索性用<code>&lt;!--[if !IE]&gt;
&lt;![endif]--&gt;</code>对休闲栏进行条件注释。一则考虑这不是重要的功能部分，再者是实在想用用这个神奇的功能。</p>
<p><span style="color:red">第八个问题,特殊字体应用的问题。</span>在CSS3中可以通过@font-face来考虑使用特殊字体，这对英文字体是很方便的。但是由于中文字体库很大，浏览加载起来对用户来说不是很友好。所以最好的就是使用在线字体库。我在寄语板中的钢笔字体用的就是有字库的在线字体库。</p>
<p><span style="color:red">第九个问题,移动端的纯js剪切板问题。</span>这个问题一直没有有效的解决。当然我知道有种方案是借助flash来解决。但还是希望通过纯js来解决。在这里留个记号，等以后厉害了，说不定就可以去解决了。</p>
<p><span style="color:red">第十个问题,favicon.ico。</span>没有做这个网站是没有留意这个东西的。本来不想写进去，但想了下还是补了进来。浏览器标题栏有个小图标真的一下子让网站变得有趣起来了。如果又看到这篇文章同时也是菜鸟想做网站的朋友，真的想分享给你。favicon.ico我是用在线网站给转换的，弄好了放在根目录就行了。然后在index.html中插入<code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.ico&quot;&gt;</code>就OK了，很简单，但是超实用~</p>
<p><span style="color:red">最重要的问题。用户体验问题</span>，一个网站光实现了功能还不行。你必须各个方面为用户着想。做这个网站，关于用户体验有几点心得。第一，不要追求复杂的动画效果，动态效果只是服务与用户。所以能让用户更加容易理解网站内容的，方便交互的动态效果才是最好的动态效果。第二，写出来的代码包含文件能压缩到20k就不要搞到30k。代码简洁，图片等素材文件大小适当能加速浏览器加载。当然，也可能根据网站内容来进行相应的加载方式（按需加载等）。第三，网站要有合理的提示内容，这种提示内容一般psd文件不会有，开发人员可根据自己的经验，给予一些温馨的提示。</p>
<p>写到这里，其实也就差不多了。至于一些细节的技术分享也没贴出来。说实话也没贴多少代码。关键我觉得做网站，那些技术bug等等的都是常规的。在这里我记录的都是自己以前做小项目没有的感受和总结。</p>
<p>最后，我想说的是我决定在今年对网站进行第二版更新。经过这段时间对这个网站的开发更让我对自己掌握的基础技术有了信心，也让我有了强烈的欲望在此基础上在走出一步。说实话，学了那么多课程，真正的把技术用于实践才能把书本上的变成自己的，这也让我更明确要想在程序猿这条路上进步，必须多做，多总结。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> programme </tag>
            
            <tag> my-website </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>/2017/08/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>&ensp;&ensp;弄了这么久，终于把自己的个人网站搭建好了。说实话，并没有太多的惊喜，因为我明白这只是所有一切的开端。但终归还是得说一句，终于可以有自己的一片空间能记述我的一切心情，想法，以及发现，我也终于在程序员这条路上开始越走越远，一发不可收拾~</p>
<p>&ensp;&ensp;一路过来，其实受到了太多的非议和质疑，我也有过很多次的怀疑自己。但也在这个过程中发现自己的心境变得越来越阔达，真的很感谢我的爸妈，一直很担心我的以后，却没有过度的指责我的坚持。人生路还很漫长，即使没有人肯定你，你依然需要坚持，这既是对自己的肯定，也是回应周围人最好的方式。我至始至终相信，一个始终努力的人，一个有想法的人是不会辜负时光的。与其在害怕与迷茫中徘徊，不如潇洒的朝自己想要的生活走去，毕竟我们还年轻，毕竟我们还有激情满满的动力还有一个健康的身体。而现在，这个个人网站就是对我这几个月的付出最好的证明，也是我坚信自己以后不管遇到什么，我都会坦然地，坚毅地走下去~</p>
<p>&ensp;&ensp;关于感想也不再多说了，谈谈以后的规划吧，这个才是真正让我牵挂和兴奋的地方。做这个网站我的初衷就是记录自己，分享自己，见证自己，刚开始做的时候，并没有想太多，只是单纯的想做个网站，把自己学到的技术应用一遍，巩固一遍。到后来发现。个人博客是一个很有魅力的东西，它可以完完全全的展示自己，也可以和不同的人进行交流，最重要的是它就像一个秘密的小岛，你可以完全放松自己，把自己的所有东西都放在这里。而且它还可以和我一起不断地成长。这么好的东西，该怎么用呢？又有什么打算呢？以下就是我的一些规划：</p>
<ol>
<li><p>今年内，对个人博客网站进行第二版本的更新，用vue以及webpack进行开发，以及对数据库，php进行深入学习，增添一些互动的板块功能，管理员登陆操作相关功能，可以的话做个简单的文件上传功能。</p>
</li>
<li><p>今后的前端学习技术总结，统一分享到我的博客中。</p>
</li>
<li><p>多写日记，记录生活，总结生活。把生活的点点滴滴充实起来，变得美好，温暖。</p>
</li>
<li><p>博客坚持至少每周一更，坚持才能有收获。 </p>
</li>
</ol>
<p>&ensp;&ensp;暂时想到这么多，就写这么多吧。这第一篇博客更多的是我自己对自己的一个期盼。以前的我一直很闷骚，有了这么个平台，得要好好耕耘，努力把它变成一个越来越丰富的世界。我相信，若干年后我回头看，它一定是帮助我成长的一个工具，也是见证我成长的一双眼睛。</p>
<p>&ensp;&ensp;生命不息，奋斗不止<del>~</del></p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
